graph craftmanship_knowlege_map {
  一次只做一件事 -- 一个函数只做一件事;
  一次只做一件事 -- 一次提交只做一件事;
  一次只做一件事 -- 一个类只有一个职责; 
  面向过程编程 -- 函数_变量命名清晰_见名知意;
  面向过程编程 -- 函数_变量命名清晰_不使用缩写;
  面向过程编程 -- 函数不超过15行;
  面向过程编程 -- 不要超过三级缩进;
  面向过程编程 -- 通过流程定义来减少if;
  函数式编程 -- 用lambda取代for和while;
  函数式编程 -- flow_api;
  结构化编程 -- 正确的使用if;
  结构化编程 -- 正确的使用for和while;
  结构化编程 -- 该使用集合的时候不使用一个个变量;
  编程常用DSL -- 集合操作库_lambda, 正则表达式;
  降低圈复杂度 -- 集合操作库_lambda -- 用lambda取代for和while;
  通过数据结构来简化程序设计 -- 面向对象编程, 面向过程编程;
  元能力 -- 任务划分, 模式识别, 提出正确的问题;
  提出正确的问题 -- 批判性思考;
  辅助技能 -- 写作, 简单逻辑学, 金字塔原理,讨论引导技巧;
  "寻找Root cause" -- 读日志,写测试,Debug,批判性思考;
  TDD -- 七步提交法;
  TDD -- unit_test -- mock技术 -- mock,spy,fake,stub,dummy;
  TDD -- integration_test;
  TDD -- automation_functional_test -- test_driver;
  TDD -- test_framework;
  TDD -- BDD;
  BDD -- cucumber;
  单文件200行;
  企业架构模式 -- MVC,ORM,Queue;
  职责划分 -- controller不实现任何功能方法，只通过调用功能方法实现逻辑控制。;
  职责划分 -- view有自己的逻辑，controller只向view提供指示性标志变量和数据源。;
  Java_设计模式,Javascript_设计模式,Ruby_设计模式,PHP_设计模式,Objective_C_设计模式 -- OO设计模式 -- 面向对象编程;
  消息分发机制;
  生产者消费者;
  db_migration;
  DevOps;
  敏捷 -- XP,Scrum,FDD;
  FDD -- 彩色UML -- 四色建模;
  Scrum -- 站会,回顾;
  XP -- TDD, Pair, 现场客户, 迭代, 持续集成, feedback,小步快跑,计划游戏会议,重构,代码集体所有,隐喻,简单设计,可持续的速率;
  持续集成 -- "Build pipeline" ,"Build Stage";
  "Infrastructure as code"
  "Convension over specification";
  快捷键 -- IDEA家族快捷键,Eclipse快捷键,Sublime快捷键,"NotePad++快捷键", WindowsGUI快捷键, LinuxGUI快捷键, vim快捷键, emacs快捷键;
  命令行 -- Linux命令行,Windows命令行,其他库命令行;
  能源有限设备编程 -- 省电策略,运算策略;
  数据结构 -- 堆,栈,队列,链表,列表,有向列表,树,图;
  算法;
}	