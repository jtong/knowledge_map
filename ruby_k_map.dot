graph ruby_knowlege_map {
  面向对象编程 -- Ruby的对象写法;
  Ruby的对象写法 -- 初始化;
  Ruby的对象写法 -- 继承;
  Ruby的对象写法 -- 覆盖;
  Ruby的对象写法 -- 命名空间_module;
  元编程 -- include_methods;
  元编程 -- method_missing;
  元编程 -- 打开类;
  元编程 -- 静态元编程_generator -- thor;
  元编程 -- 函数式编程;
  集合操作库_lambda -- Ruby_原生;
  函数式编程 - 传Block或Proc, 闭包;
  Web_MVC -- Routing -- "wild characters" -- "routes.rb", "build-in method in Controller";
  Routing -- "routes.rb" -- RubyOnRails;
  Routing -- "build-in method in Controller" -- Sinatra,Padrino
  Web_MVC -- write_MVC_in_framework -- view -- render -- html,json,rss,xml,text,file_download;
  Web_MVC -- 子系统 -- rails_engine,app;
  rails_engine -- RubyOnRails;
  app -- Padrino;
  html -- template_engine -- language -- haml,erb,slim;
  template_engine --  feature -- layout;
  view -- js合并与压缩,css合并与压缩;
  RubyOnRails -- layout -- Padrino;
  Web_MVC -- Web_MVC_Framework; 
  Web_MVC_Framework -- RubyOnRails;
  Web_MVC_Framework -- Padrino;
  Web_MVC_Framework -- Sinatra;
  AOP -- filter, middleware;
  filter -- RubyOnRails;
  middleware -- Sinatra, Padrino;
  TDD -- test_skill;
  test_skill -- "Test Controller without view render" -- test_Padrino, test_RubyOnRails, test_Sinatra;
  test_skill -- "Test through URL without view render" -- test_Padrino, test_RubyOnRails, test_Sinatra;
  test_skill -- "test meta programming";
  test_framework -- Ruby_test_framework -- rspec;
  职责划分 -- controller不实现任何功能方法，只通过调用功能方法实现逻辑控制。;
  职责划分 -- view有自己的逻辑，controller只向view提供指示性标志变量和数据源。;
  view有自己的逻辑，controller只向view提供指示性标志变量和数据源。 -- view_helper;
  view有自己的逻辑，controller只向view提供指示性标志变量和数据源。 -- directive;
  RubyOnRails -- view_helper;
  Padrino -- view_helper;
  Ruby_设计模式 -- OO设计模式;
  OO设计模式 -- 面向对象编程;
  ORM -- active_record;
  RubyOnRails -- db_migration;
  db_migration -- Padrino;
  Build -- rake;
  Build -- thor;
  依赖管理 -- bundler -- Gemfile -- gem;
  依赖管理 -- rvm -- gemset -- gem;
  包 -- gem -- "gem 开发" -- 普通gem, 带命令行gem,带资源文件gem;
  Ruby_重构;
  Ruby_正则表达式;
  Debug -- Postman, "Debug Rails"; 
}	